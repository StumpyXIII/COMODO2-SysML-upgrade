# Auto-generated CMakeLists.txt for F Prime component
# Generated from UML 5.x XMI: SlewUseCaseBlock
# Pipeline: XMI → XML → F Prime Toolchain → UML Implementation

# Component XML descriptor (input to F Prime toolchain)
set(COMPONENT_XML "${CMAKE_CURRENT_LIST_DIR}/SlewUseCaseBlock_OpticalCommUseCasesComponent.xml")

# F Prime generated base classes (from toolchain)
set(FPRIME_GENERATED_DIR "${CMAKE_CURRENT_LIST_DIR}/generated")

# UML-derived implementation files (our semantic logic)
set(IMPLEMENTATION_FILES
  "${CMAKE_CURRENT_LIST_DIR}/SlewUseCaseBlock_OpticalCommUseCasesComponentImpl.hpp"
  "${CMAKE_CURRENT_LIST_DIR}/SlewUseCaseBlock_OpticalCommUseCasesComponentImpl.cpp"
)

# F Prime base class files (generated by toolchain or mocked)
set(FPRIME_BASE_FILES
  "${FPRIME_GENERATED_DIR}/SlewUseCaseBlock_OpticalCommUseCasesComponentBase.hpp"
  "${FPRIME_GENERATED_DIR}/SlewUseCaseBlock_OpticalCommUseCasesComponentBase.cpp"
  "${FPRIME_GENERATED_DIR}/SlewUseCaseBlock_OpticalCommUseCasesComponentAc.hpp"
)

# Register F Prime module
register_fprime_module()

# Component dependencies
set(MOD_DEPS
  Fw/Cmd
  Fw/Comp
  Fw/Log
  Fw/Tlm
  Fw/Types
  Svc/Sched
)

# Include F Prime generated directory
include_directories(${FPRIME_GENERATED_DIR})

# Build the component
set(SOURCE_FILES ${IMPLEMENTATION_FILES} ${FPRIME_BASE_FILES})
register_fprime_implementation()

# Custom targets for F Prime toolchain integration
add_custom_target(generate_slewusecaseblock_opticalcommusecases_base
  COMMAND fpp-to-cpp --input ${COMPONENT_XML} --output-dir ${FPRIME_GENERATED_DIR}
  DEPENDS ${COMPONENT_XML}
  COMMENT "Generating F Prime base classes from XML"
)
