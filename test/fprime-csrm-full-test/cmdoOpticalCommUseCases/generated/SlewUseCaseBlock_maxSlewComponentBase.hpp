#ifndef SLEWUSECASEBLOCK_MAXSLEW_COMPONENT_BASE_HPP
#define SLEWUSECASEBLOCK_MAXSLEW_COMPONENT_BASE_HPP

// Mock F Prime component base class (generated when F Prime toolchain unavailable)
// In production, this would be generated by fpp-to-cpp

#include <Fw/Comp/ActiveComponentBase.hpp>
#include <Fw/Types/BasicTypes.hpp>

namespace Components {

  class SlewUseCaseBlock_maxSlewComponentBase : public Fw::ActiveComponentBase {
  public:
    SlewUseCaseBlock_maxSlewComponentBase(const char* const compName);
    virtual ~SlewUseCaseBlock_maxSlewComponentBase();

    // Mock command response port
    void cmdResponse_out(FwOpcodeType opCode, U32 cmdSeq, Fw::CmdResponse response);
    
    // Mock telemetry port
    void tlmWrite_CurrentState(const char* val);
    
    // Mock logging port
    void log_ACTIVITY_HI_StateTransition(const char* from, const char* to);
    
    // Virtual command handlers (to be implemented by derived class)
    virtual void START_STATE_MACHINE_cmdHandler(const FwOpcodeType opCode, const U32 cmdSeq) = 0;
    virtual void STOP_STATE_MACHINE_cmdHandler(const FwOpcodeType opCode, const U32 cmdSeq) = 0;

  protected:
    // Mock port implementations
    void mockCmdResponse(FwOpcodeType opCode, U32 cmdSeq, Fw::CmdResponse response);
    void mockTlmWrite(const char* channel, const char* val);
    void mockLogEvent(const char* event, const char* arg1, const char* arg2);
  };

} // end namespace Components

#endif // SLEWUSECASEBLOCK_MAXSLEW_COMPONENT_BASE_HPP
